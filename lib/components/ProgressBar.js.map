{"version":3,"sources":["../../src/components/ProgressBar.js"],"names":["ProgressBar","React","Component","constructor","props","progress","self","state","cvs","createRef","componentDidMount","ctx","current","getContext","size","dpr","window","devicePixelRatio","targetElm","canvas","targetWidth","clientWidth","targetHeight","clientHeight","width","height","clear","clearRect","draw","beginPath","fillStyle","rect","fill","heartbeat","timestamp","shouldContinueHeartbeat","requestAnimationFrame","componentWillUnmount","render"],"mappings":"AAAA,OAAO,MAAMA,WAAN,SAA0BC,MAAMC,SAAhC,CAAyC;AAC/CC,aAAYC,KAAZ,EAAkB;AACjB,QAAMA,KAAN;AACA,QAAM;AACLC;AADK,MAEFD,KAFJ;AAGA,QAAME,OAAO,IAAb;AACAA,OAAKC,KAAL,GAAa;AACZF,aAASA,YAAY;AADT,GAAb;AAGAC,OAAKE,GAAL,GAAWP,MAAMQ,SAAN,EAAX;AACA;AACDC,qBAAmB;AAClB,QAAMJ,OAAO,IAAb;AACA,QAAMK,MAAML,KAAKE,GAAL,CAASI,OAAT,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;;AAEA,QAAMC,OAAQH,GAAD,IAAS;AACrB,SAAMI,MAAMC,OAAOC,gBAAP,IAA2B,GAAvC;AACA,SAAMC,YAAYP,IAAIQ,MAAtB;AACA,SAAMC,cAAcF,UAAUG,WAAV,GAAwBN,GAA5C;AACA,SAAMO,eAAeJ,UAAUK,YAAV,GAAyBR,GAA9C;AACA,OAAMJ,IAAIQ,MAAJ,CAAWK,KAAX,KAAqBJ,WAAtB,IAAuCT,IAAIQ,MAAJ,CAAWM,MAAX,KAAsBH,YAAlE,EAAkF;AACjFX,QAAIQ,MAAJ,CAAWK,KAAX,GAAmBJ,WAAnB;AACAT,QAAIQ,MAAJ,CAAWM,MAAX,GAAoBH,YAApB;AACA;AACD,GATD;AAUA,QAAMI,QAASf,GAAD,IAASA,IAAIgB,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAkBhB,IAAIQ,MAAJ,CAAWK,KAA7B,EAAmCb,IAAIQ,MAAJ,CAAWM,MAA9C,CAAvB;;AAEA,QAAMG,OAAQjB,GAAD,IAAS;AACrBA,OAAIkB,SAAJ;AACAlB,OAAImB,SAAJ,GAAgB,OAAhB;AACAnB,OAAIoB,IAAJ,CAAS,CAAT,EAAW,CAAX,EAAczB,KAAKC,KAAL,CAAWF,QAAX,GAAoBM,IAAIQ,MAAJ,CAAWK,KAA7C,EAAqDb,IAAIQ,MAAJ,CAAWM,MAAhE;AACAd,OAAIqB,IAAJ;AACA,GALD;;AAOA,WAASC,SAAT,CAAmBC,SAAnB,EAA6B;AAC5B,OAAG5B,KAAK6B,uBAAR,EAAgC;AAC/BC,0BAAsBH,SAAtB;AACA;;AAEDnB,QAAKH,GAAL;AACAe,SAAMf,GAAN;AACAiB,QAAKjB,GAAL;AACA;;AAEDyB,wBAAsBH,SAAtB;AAEA;AACDI,wBAAsB;AACrB,OAAKF,uBAAL,GAA+B,KAA/B;AACA;AACDG,UAAQ;AACP,SAAO,gCAAQ,WAAU,cAAlB,EAAiC,KAAK,KAAK9B,GAA3C,GAAP;AACA;AArD8C","file":"ProgressBar.js","sourcesContent":["export class ProgressBar extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tconst {\n\t\t\tprogress\n\t\t} = props\n\t\tconst self = this;\n\t\tself.state = {\n\t\t\tprogress:progress || 0.0\n\t\t}\n\t\tself.cvs = React.createRef()\n\t}\n\tcomponentDidMount(){\n\t\tconst self = this\n\t\tconst ctx = self.cvs.current.getContext('2d')\n\t\t\n\t\tconst size = (ctx) => {\n\t\t\tconst dpr = window.devicePixelRatio || 1.0\n\t\t\tconst targetElm = ctx.canvas\n\t\t\tconst targetWidth = targetElm.clientWidth * dpr\n\t\t\tconst targetHeight = targetElm.clientHeight * dpr\n\t\t\tif(( (ctx.canvas.width !== targetWidth) || (ctx.canvas.height !== targetHeight) )){\n\t\t\t\tctx.canvas.width = targetWidth\n\t\t\t\tctx.canvas.height = targetHeight\n\t\t\t}\n\t\t}\n\t\tconst clear = (ctx) => ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height)\n\n\t\tconst draw = (ctx) => {\n\t\t\tctx.beginPath()\n\t\t\tctx.fillStyle = 'black'\n\t\t\tctx.rect(0,0,(self.state.progress*ctx.canvas.width), ctx.canvas.height)\n\t\t\tctx.fill()\n\t\t}\n\n\t\tfunction heartbeat(timestamp){\n\t\t\tif(self.shouldContinueHeartbeat){\n\t\t\t\trequestAnimationFrame(heartbeat)\n\t\t\t}\n\n\t\t\tsize(ctx)\n\t\t\tclear(ctx)\n\t\t\tdraw(ctx)\n\t\t}\n\n\t\trequestAnimationFrame(heartbeat)\n\n\t}\n\tcomponentWillUnmount(){\n\t\tthis.shouldContinueHeartbeat = false\n\t}\n\trender(){\n\t\treturn <canvas className=\"progress-bar\" ref={this.cvs}/>\n\t}\n}"]}